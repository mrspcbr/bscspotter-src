import axios from 'axios';
import * as Bitquery from './../TVChartContainer/Bitquery';



const configurationData = {
    supported_resolutions: ['15','30', '60']
};

export default(baseCurrency) => ({
    
    onReady: (callback) => {
        setTimeout(() => callback(configurationData));
    },

    resolveSymbol: async (symbolName, onSymbolResolvedCallback, onResolveErrorCallback) =>{
var address = {baseCurrency}

      const response = await axios.get(
        'https://www.api.bscspotter.com/info/'+baseCurrency)
        
        const coin = response.data
          

        

        if(!coin){
            onResolveErrorCallback();
        }else{
            const symbol = {
                ticker: symbolName,
                name: `${coin.symbol}/USD`,
                session: '24x7',
                timezone: 'Etc/UTC',
                minmov: 1,
                pricescale: 10000000,
                has_intraday: true,
                intraday_multipliers: ['1', '5', '15', '30', '60'],
                has_empty_bars: true,
                has_weekly_and_monthly: false,
                supported_resolutions: configurationData.supported_resolutions,
                volume_precision: 1,
                data_status: 'streaming',
            }
            onSymbolResolvedCallback(symbol)
        }console.log('got info')
    }, 

    getBars: async(symbolInfo, resolution, periodParams, onHistoryCallback, onErrorCallback) =>{
       
            const response = await fetch(
                'https://www.api.bscspotter.com/chart/'+baseCurrency)
                const data= await response.json();
           
                var results_max =[]
                for (var i =0; i<data.length;i++)
                 results_max.push(data[i].high, data[i].timeInterval)
                var x_max=Math.max(...results_max)
              var  x_max_string=JSON.stringify(x_max)
                console.log(x_max_string)
                
                let A = x_max_string;

                const bnb = await axios.get(
                    'https://www.api.bscspotter.com/bnb')
                    const bnb_data = JSON.stringify(bnb.data)
                    const bnb_value =bnb_data.replace(/"/g,'')
    
                    if (data.Response && data.Response === 'Error' || data.length === 0) {
                        // "noData" should be set if there is no data in the requested period.
                        onHistoryCallback([], { noData: true });
                        return;
                    }
                    let bars = [];
                    data.forEach(bar => {
                        {
                            bars = [...bars, {
                                time: new Date(bar.timeInterval.minute).getTime(),
                                low: bar.low,
                                high: bar.high,
                                open: bar.open,
                                close: bar.closee,
                                volume: bar.volume
                            }];
                        }
                    });
           
            
         console.log(`[getBars]: returned ${bars.length} bar(s)`);
                    onHistoryCallback(bars, { noData: false });
                
          
            
        }
        
    
})